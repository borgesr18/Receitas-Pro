generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      UserRole @default(EDITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  ingredients       Ingredient[]
  products         Product[]
  technicalSheets  TechnicalSheet[]
  productions      Production[]
  sales            Sale[]
  stockMovements   StockMovement[]

  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

model MeasurementUnit {
  id             String  @id @default(cuid())
  name           String  @unique
  type           String  // peso, volume, unidade
  factorToGram   Float?  // Fator de conversão para gramas
  factorToML     Float?  // Fator de conversão para ml
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relacionamentos
  ingredients    Ingredient[]

  @@map("measurement_units")
}

model IngredientCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  ingredients Ingredient[]

  @@map("ingredient_categories")
}

model Ingredient {
  id                String   @id @default(cuid())
  name              String
  purchaseQuantity  Float    // Quantidade comprada na unidade
  pricePerUnit      Float    // Preço por unidade de compra
  supplier          String?
  purchaseDate      DateTime?
  expiryDate        DateTime?
  storageLocation   String?  // seca, refrigerada, congelada
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relacionamentos
  unitId            String
  unit              MeasurementUnit @relation(fields: [unitId], references: [id])
  categoryId        String
  category          IngredientCategory @relation(fields: [categoryId], references: [id])
  user              User @relation(fields: [userId], references: [id])
  
  // Relacionamentos com fichas técnicas
  technicalSheetIngredients TechnicalSheetIngredient[]
  stockMovements    StockMovement[]
  priceHistory      IngredientPriceHistory[]

  @@map("ingredients")
}

model IngredientPriceHistory {
  id           String   @id @default(cuid())
  price        Float
  date         DateTime @default(now())
  userId       String
  createdAt    DateTime @default(now())

  // Relacionamentos
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@map("ingredient_price_history")
}

model ProductCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  products    Product[]

  @@map("product_categories")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  averageWeight Float    // Peso médio final em gramas
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  categoryId    String
  category      ProductCategory @relation(fields: [categoryId], references: [id])
  user          User @relation(fields: [userId], references: [id])
  
  technicalSheets TechnicalSheet[]
  sales          Sale[]
  productions    Production[]
  prices         ProductPrice[]

  @@map("products")
}


model ProductPrice {
  id        String   @id @default(cuid())
  channel   String   // varejo, atacado
  price     Float
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, channel])
  @@map("product_prices")
}

model TechnicalSheet {
  id              String   @id @default(cuid())
  name            String
  description     String?
  preparationTime Int?     // Tempo de preparo em minutos
  ovenTemperature Int?     // Temperatura do forno
  instructions    String?  // Modo de preparo
  observations    String?  // Observações técnicas
  finalWeight     Float    // Peso final em gramas
  totalCost       Float    @default(0)
  costPerGram     Float    @default(0)
  version         Int      @default(1)
  isActive        Boolean  @default(true)
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  productId       String?
  product         Product? @relation(fields: [productId], references: [id])
  user            User @relation(fields: [userId], references: [id])
  ingredients     TechnicalSheetIngredient[]
  productions     Production[]

  @@map("technical_sheets")
}

model TechnicalSheetIngredient {
  id           String   @id @default(cuid())
  quantity     Float    // Quantidade em gramas ou ml
  percentage   Float    // Porcentagem baseada na farinha (100%)
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  technicalSheetId String
  technicalSheet   TechnicalSheet @relation(fields: [technicalSheetId], references: [id])
  ingredientId     String
  ingredient       Ingredient @relation(fields: [ingredientId], references: [id])

  @@unique([technicalSheetId, ingredientId])
  @@map("technical_sheet_ingredients")
}

model Production {
  id              String   @id @default(cuid())
  quantity        Float    // Quantidade produzida
  actualWeight    Float    // Peso real produzido
  losses          Float?   // Perdas em gramas
  lossPercentage  Float?   // Percentual de perdas
  notes           String?  // Observações
  batchNumber     String   // Número do lote
  productionDate  DateTime @default(now())
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  technicalSheetId String
  technicalSheet   TechnicalSheet @relation(fields: [technicalSheetId], references: [id])
  productId        String?
  product          Product? @relation(fields: [productId], references: [id])
  user             User @relation(fields: [userId], references: [id])
  
  stockMovements  StockMovement[]

  @@map("productions")
}

model StockMovement {
  id          String      @id @default(cuid())
  type        MovementType
  quantity    Float
  unitPrice   Float?
  totalValue  Float?
  reason      String?
  date        DateTime    @default(now())
  userId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relacionamentos
  ingredientId String?
  ingredient   Ingredient? @relation(fields: [ingredientId], references: [id])
  productionId String?
  production   Production? @relation(fields: [productionId], references: [id])
  user         User @relation(fields: [userId], references: [id])

  @@map("stock_movements")
}

enum MovementType {
  IN      // Entrada
  OUT     // Saída
  LOSS    // Perda
  ADJUST  // Ajuste
}

model Sale {
  id              String   @id @default(cuid())
  quantity        Int      @default(1)
  weight          Float    // Peso vendido
  unitPrice       Float    // Preço unitário
  totalPrice      Float    // Preço total
  costPrice       Float    @default(0)
  profit          Float    @default(0)
  profitPercentage Float   @default(0)
  channel         String   // varejo, atacado
  notes           String?
  saleDate        DateTime @default(now())
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  productId   String
  product     Product @relation(fields: [productId], references: [id])
  user        User @relation(fields: [userId], references: [id])

  @@map("sales")
}
